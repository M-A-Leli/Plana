generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  salt         String
  username     String   @unique
  profile_img  String?
  is_deleted   Boolean  @default(false)
  is_suspended Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  attendees            Attendee?
  organizers           Organizer?
  admin                Admin?
  notifications        Notification[]
  password_reset_codes PasswordResetCode[]

  @@map("Users")
}

model Attendee {
  id         String  @id @default(uuid())
  user_id    String  @unique
  bio        String?
  is_deleted Boolean @default(false)

  orders  Order[]
  reviews Review[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Attendees")
}

model Organizer {
  id         String  @id @default(uuid())
  user_id    String  @unique
  company    String?
  bio        String?
  events     Event[]
  is_deleted Boolean @default(false)
  approved   Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Organizers")
}

model Admin {
  id         String  @id @default(uuid())
  user_id    String  @unique
  level      Int
  is_deleted Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Admins")
}

model PasswordResetCode {
  id         String   @id @default(uuid())
  user_id    String
  code       String
  is_valid   Boolean  @default(true)
  created_at DateTime @default(now())
  expires_at DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("PasswordResetCodes")
}

model Event {
  id                String   @id @default(uuid())
  organizer_id      String
  title             String
  description       String
  date              DateTime
  start_time        String
  end_time          String
  venue             String
  category_id       String
  is_deleted        Boolean  @default(false)
  is_featured       Boolean  @default(false)
  average_rating    Float    @default(0)
  number_of_reviews Int      @default(0)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  images       EventImage[]
  ticket_types TicketType[]
  orders       Order[]
  reviews      Review[]

  organizer Organizer @relation(fields: [organizer_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category          Category      @relation(fields: [category_id], references: [id])

  @@map("Events")
}

model EventImage {
  id         String   @id @default(uuid())
  url        String
  event_id   String
  created_at DateTime @default(now())
  is_deleted Boolean  @default(false)

  event Event @relation(fields: [event_id], references: [id])

  @@map("EventImages")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  is_deleted  Boolean       @default(false)
  events      Event[]

  @@map("Categories")
}

model TicketType {
  id           String   @id @default(uuid())
  event_id     String
  name         String
  price        Decimal
  availability Int
  group_size   Int?     @default(1)
  is_deleted   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  tickets Ticket[]

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("TicketTypes")
}

model Ticket {
  id             String   @id @default(uuid())
  ticket_type_id String
  order_id       String
  quantity       Int
  subtotal       Decimal
  unique_code    String   @unique
  is_deleted     Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  ticket_type TicketType @relation(fields: [ticket_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order       Order      @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Tickets")
}

model Order {
  id           String   @id @default(uuid())
  attendee_id  String
  event_id     String
  total        Decimal
  payment_id   String?
  is_deleted   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  tickets Ticket[]
  payment Payment?

  attendee Attendee @relation(fields: [attendee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event    Event    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Orders")
}

model Notification {
  id         String   @id @default(uuid())
  user_id    String
  type       String   @default("SYSTEM") // Options: SYSTEM, EMAIL
  message    String
  read       Boolean  @default(false)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("Notifications")
}

model Review {
  id          String   @id @default(uuid())
  attendee_id String
  event_id    String
  rating      Float
  comment     String
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())

  attendee Attendee @relation(fields: [attendee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event    Event    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Reviews")
}

model Payment {
  id           String   @id @default(uuid())
  order_id     String   @unique
  amount       Decimal
  payment_date DateTime @default(now())
  status       String   @default("PENDING") // Options: PENDING, COMPLETED, FAILED
  is_deleted   Boolean  @default(false)

  order Order @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Payments")
}
